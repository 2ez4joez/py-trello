from httplib2 import Http
from urllib import urlencode
from models import ResourceUnavailable
import json

class Trello:

	def __init__(self, api_key, oauth_token):
		"""
		Constructor

		:api_key: API key generated at https://trello.com/1/appKey/generate
		:oauth_token: OAuth token generated by the user
		"""
		self.client = Http()
		self.key = api_key
		self.token = oauth_token

	def logout(self):
		"""Log out of Trello. This method is idempotent."""

		# TODO: refactor
		pass
		#if not self._cookie:
			#return

		#headers = {'Cookie': self._cookie, 'Accept': 'application/json'}
		#response, content = self.client.request(
				#'https://trello.com/logout',
				#'GET',
				#headers = headers,
				#)

		## TODO: error checking
		#self._cookie = None

	def build_url(self, path, query = {}):
		"""
		Builds a Trello URL.

		:path: URL path
		:params: dict of key-value pairs for the query string
		"""
		url = 'https://api.trello.com/1'
		if path[0:1] != '/':
			url += '/'
		url += path
		url += '?'
		url += "key="+self.key
		url += "&token="+self.token

		for k,v in query.iteritems():
			url += "&"+urlencode(k)+"="+urlencode(v)
		return url

	def list_boards(self):
		"""
		Returns all boards for your Trello user

		:return: a list of Python objects representing the Trello boards. Each board has the 
		following noteworthy attributes:
			- id: the board's identifier
			- name: Name of the board
			- desc: Description of the board
			- closed: Boolean representing whether this board is closed or not
			- url: URL to the board
		"""
		headers = {'Accept': 'application/json'}
		response, content = self.client.request(
				self.build_url( "/members/me/boards/all" ),
				'GET',
				headers = headers,
				)

		# TODO: error checking
		json_obj = json.loads(content)
		boards = list()
		for b in json_obj:
			board = Board(self, b['id'])
			board.name = b['name']
			board.description = b['desc']
			board.closed = b['closed']
			board.url = b['url']
			boards.append(board)

		return boards

	def add_card(self, board_id, name):
		"""Adds a card to the first list in the given board

		:board_id: identifier for the board to which the card is to be added
		:name: name for the new card
		:returns: the id for the new card
		"""

		headers = {'Accept': 'application/json'}
		response, content = self.client.request(
				'https://trello.com/data/board/'+board_id+'/current',
				'GET',
				headers = headers,
				)

		# TODO: error checking

		json_obj = json.loads(content)

		# get first list
		list_id = None
		for board in json_obj['boards']:
			if board['_id'] == board_id:
				if 'lists' in board:
					list_id = board['lists'][0]['_id']

		if not list_id:
			raise NoSuchObjectError('board', board_id)

		request = {
				'token': self.token,
				'method': 'create',
				'data': {
					'attrs': {
						'name': name,
						'pos': 65536,
						'closed': False,
						'idBoard': board_id,
						"idList": list_id,
						},
					'idParents': [ board_id, list_id ],
					}
				}

		headers = {'Accept': 'application/json', 'Content-Type': 'application/json'}
		url = self.build_url('cards')
		response, content = self.client.request(
				url,
				'POST',
				headers = headers,
				body = json.dumps(request),
				)
		if response.status != 200:
			raise ResourceUnavailable(url)

		json_obj = json.loads(content)
		print content
		return json_obj['_id']

class Board():
	"""Class representing a Trello board. Board attributes are stored as normal Python attributes;
	access to all sub-objects, however, is always an API call (Lists, Cards).
	"""

	def __init__(self, trello, board_id):
		"""Constructor.
		
		:trello: Reference to a Trello object
		:board_id: ID for the board
		"""
		self.trello = trello
		self.id = board_id
		
	def lists(self):
		"""Returns all lists on this board"""

		headers = {'Accept': 'application/json'}

		url = self.trello.build_url( '/boards/'+self.id+'/lists/all' ),
		response, content = self.trello.client.request(url, 'GET', headers = headers)

		# error checking
		if response.status != 200:
			raise ResourceUnavailable(url)

		json_obj = json.loads(content)
		return json_obj
